import os
import re
import json
import time
import random
import requests
import pytz
import pandas as pd
from datetime import datetime
from bs4 import BeautifulSoup

# --- ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á Selenium ---
try:
    from selenium import webdriver
    from selenium.webdriver.chrome.options import Options
    from selenium.webdriver.chrome.service import Service
    from webdriver_manager.chrome import ChromeDriverManager
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    SELENIUM_AVAILABLE = True
except ImportError:
    SELENIUM_AVAILABLE = False
    print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Selenium ‡∏´‡∏£‡∏∑‡∏≠ Webdriver Manager, ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")


# --- ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà ---
SINGBURI_URL = "https://singburi.thaiwater.net/wl"
DISCHARGE_URL = 'https://tiwrm.hii.or.th/DATA/REPORT/php/chart/chaopraya/small/chaopraya.php'
LINE_TOKEN = os.environ.get('LINE_CHANNEL_ACCESS_TOKEN')
LINE_GROUP_ID = os.environ.get('LINE_GROUP_ID')
LINE_PUSH_API_URL = "https://api.line.me/v2/bot/message/push"

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Selenium Driver ---
def setup_driver():
    """‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Chrome Driver ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö Headless ‡∏ö‡∏ô Server"""
    chrome_options = Options()
    chrome_options.add_argument("--headless")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument('user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36')
    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service, options=chrome_options)
    return driver

# -- ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å Excel --
THAI_MONTHS = {
    '‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°':1, '‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå':2, '‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°':3, '‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô':4,
    '‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°':5, '‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô':6, '‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°':7, '‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°':8,
    '‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô':9, '‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°':10, '‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô':11, '‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°':12
}
def get_historical_from_excel(year_be: int) -> int | None:
    possible_paths = [f"data/‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏õ‡∏µ{year_be}.xlsx", f"‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏õ‡∏µ{year_be}.xlsx"]
    file_path = None
    for p in possible_paths:
        if os.path.exists(p):
            file_path = p
            break
    if file_path is None:
        print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏µ {year_be}")
        return None
    try:
        df = pd.read_excel(file_path)
        discharge_col = None
        for col in df.columns:
            if '‡∏•‡∏ö.‡∏°.' in str(col) or 'discharge' in str(col) or '‡∏Ñ‡πà‡∏≤' in str(col):
                discharge_col = col
                break
        if discharge_col is None: return None
        df = df.rename(columns={discharge_col: 'discharge'})
        if '‡πÄ‡∏î‡∏∑‡∏≠‡∏ô' in df.columns and '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà' in df.columns:
            df['month_num'] = df['‡πÄ‡∏î‡∏∑‡∏≠‡∏ô'].map(THAI_MONTHS)
            df['day_num'] = df['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà']
        elif '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà' in df.columns:
            df['date'] = pd.to_datetime(df['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà'], errors='coerce')
            df['month_num'] = df['date'].dt.month
            df['day_num'] = df['date'].dt.day
        else: return None
        now = datetime.now(pytz.timezone('Asia/Bangkok'))
        match = df[(df['day_num'] == now.day) & (df['month_num'] == now.month)]
        if not match.empty:
            val = match.iloc[0]['discharge']
            val_int = int(str(val).replace(',', ''))
            print(f"‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏µ {year_be}: {val_int} ‡∏•‡∏ö.‡∏°./‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡πÑ‡∏ü‡∏•‡πå: {file_path})")
            return val_int
        print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {now.day}/{now.month} ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏õ‡∏µ {year_be} (‡πÑ‡∏ü‡∏•‡πå: {file_path})")
        return None
    except Exception as e:
        print(f"‚ùå ERROR: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å Excel ‡πÑ‡∏î‡πâ ({file_path}): {e}")
        return None

# --- [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡∏î‡∏∂‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πå‡∏ö‡∏∏‡∏£‡∏µ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Selenium (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤) ---
def get_inburi_data(url: str, timeout: int = 45):
    if not SELENIUM_AVAILABLE:
        return None, None
    driver = setup_driver()
    try:
        driver.get(url)
        WebDriverWait(driver, 30).until(
            EC.presence_of_element_located((By.XPATH, "//*[contains(text(), '‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πå‡∏ö‡∏∏‡∏£‡∏µ')]"))
        )
        html = driver.page_source
        soup = BeautifulSoup(html, "html.parser")
        
        # --- ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ---
        # 1. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏∏‡∏Å‡πÅ‡∏ñ‡∏ß‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
        all_rows = soup.find_all('tr')
        target_row = None
        # 2. ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ '‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πå‡∏ö‡∏∏‡∏£‡∏µ'
        for row in all_rows:
            if '‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πå‡∏ö‡∏∏‡∏£‡∏µ' in row.get_text():
                target_row = row
                break # ‡πÄ‡∏à‡∏≠‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏õ
        # --- ‡∏à‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ---
        
        if target_row is None:
            print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ '‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πå‡∏ö‡∏∏‡∏£‡∏µ' ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á (‡∏´‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ Selenium)")
            return None, None

        row_text = target_row.get_text(separator=' ', strip=True)
        # ‡πÉ‡∏ä‡πâ Regex ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏∏‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
        num_strs = re.findall(r'[-+]?\d*\.\d+|\d+', row_text)
        values = [float(ns) for ns in num_strs]

        if not values or len(values) < 2:
            print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ '‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πå‡∏ö‡∏∏‡∏£‡∏µ'")
            return None, None
        
        water_level = values[0]
        bank_level = values[1]
        
        print(f"‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πå‡∏ö‡∏∏‡∏£‡∏µ: ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥={water_level}, ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ï‡∏•‡∏¥‡πà‡∏á={bank_level}")
        return water_level, bank_level
    except Exception as e:
        print(f"‚ö†Ô∏è ERROR: get_inburi_data (Selenium): {e}")
        return None, None
    finally:
        driver.quit()

# --- ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏û‡∏£‡∏∞‡∏¢‡∏≤‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Selenium (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ---
def fetch_chao_phraya_dam_discharge(url: str, timeout: int = 30):
    if not SELENIUM_AVAILABLE:
        return None
    driver = setup_driver()
    try:
        driver.get(url)
        WebDriverWait(driver, 30).until(
            EC.presence_of_element_located((By.XPATH, "//script[contains(text(), 'json_data')]"))
        )
        html = driver.page_source
        match = re.search(r'json_data\s*=\s*(\[.*?\]);', html, flags=re.DOTALL)
        if not match:
            print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ 'json_data' ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö (‡∏´‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ Selenium)")
            return None
        json_string = match.group(1)
        data = json.loads(json_string)
        for entry in data:
            if isinstance(entry, dict) and 'itc_water' in entry and 'C13' in entry['itc_water']:
                storage_val = entry['itc_water']['C13'].get('storage')
                if storage_val:
                    value = float(str(storage_val).replace(',', ''))
                    print(f"‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏û‡∏£‡∏∞‡∏¢‡∏≤: {value}")
                    return value
        print("‚ö†Ô∏è ‡∏û‡∏ö json_data ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 'C13.storage'")
        return None
    except Exception as e:
        print(f"‚ö†Ô∏è ERROR: fetch_chao_phraya_dam_discharge (Selenium): {e}")
        return None
    finally:
        driver.quit()

# --- ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ---
def analyze_and_create_message(inburi_level, dam_discharge, bank_height, hist_2567=None, hist_2565=None, hist_2554=None):
    distance_to_bank = bank_height - inburi_level
    ICON, HEADER, summary_text = "", "", ""
    if dam_discharge > 2400 or distance_to_bank < 1.0:
        ICON, HEADER = "üü•", "‚ÄºÔ∏è ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏†‡∏±‡∏¢‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î ‚ÄºÔ∏è"
        summary_text = "‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:\n1. ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏≠‡∏û‡∏¢‡∏û‡∏´‡∏≤‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á\n2. ‡∏Ç‡∏ô‡∏¢‡πâ‡∏≤‡∏¢‡∏ó‡∏£‡∏±‡∏û‡∏¢‡πå‡∏™‡∏¥‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏π‡∏á‡πÇ‡∏î‡∏¢‡∏î‡πà‡∏ß‡∏ô\n3. ‡∏á‡∏î‡πÉ‡∏ä‡πâ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏à‡∏£‡∏£‡∏¥‡∏°‡πÅ‡∏°‡πà‡∏ô‡πâ‡∏≥"
    elif dam_discharge > 1800 or distance_to_bank < 2.0:
        ICON, HEADER = "üü®", "‚ÄºÔ∏è ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á ‚ÄºÔ∏è"
        summary_text = "‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:\n1. ‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏£‡∏∑‡∏≠‡∏ô‡∏£‡∏¥‡∏°‡∏ï‡∏•‡∏¥‡πà‡∏á‡∏ô‡∏≠‡∏Å‡∏Ñ‡∏±‡∏ô‡∏Å‡∏±‡πâ‡∏ô‡∏ô‡πâ‡∏≥ ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Ç‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏π‡∏á\n2. ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏Å‡∏•‡πâ‡∏ä‡∏¥‡∏î"
    else:
        ICON, HEADER = "üü©", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏Å‡∏ï‡∏¥"
        summary_text = "‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ô‡πâ‡∏≥‡∏¢‡∏±‡∏á‡∏õ‡∏Å‡∏ï‡∏¥ ‡πÉ‡∏ä‡πâ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥‡∏Ñ‡∏£‡∏±‡∏ö"
    now = datetime.now(pytz.timezone('Asia/Bangkok'))
    TIMESTAMP = now.strftime('%d/%m/%Y %H:%M')
    msg_lines = [
        f"{ICON} {HEADER}", "",
        f"üìç ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ô‡πâ‡∏≥‡πÄ‡∏à‡πâ‡∏≤‡∏û‡∏£‡∏∞‡∏¢‡∏≤ ‡∏à.‡∏≠.‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πå‡∏ö‡∏∏‡∏£‡∏µ", f"üóìÔ∏è ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {TIMESTAMP} ‡∏ô.", "",
        "üåä ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥ + ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ï‡∏•‡∏¥‡πà‡∏á", f"  ‚Ä¢ ‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πå‡∏ö‡∏∏‡∏£‡∏µ: {inburi_level:.2f} ‡∏°.‡∏£‡∏ó‡∏Å.",
        f"  ‚Ä¢ ‡∏ï‡∏•‡∏¥‡πà‡∏á: {bank_height:.2f} ‡∏°.‡∏£‡∏ó‡∏Å. (‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ {distance_to_bank:.2f} ‡∏°.)", "",
        "üíß ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ô‡πâ‡∏≥‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÄ‡∏Ç‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏û‡∏£‡∏∞‡∏¢‡∏≤", f"  {dam_discharge:,.0f} ‡∏•‡∏ö.‡∏°./‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ", "",
        "üîÑ ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á",
    ]
    if hist_2567 is not None: msg_lines.append(f"  ‚Ä¢ ‡∏õ‡∏µ 2567: {hist_2567:,.0f} ‡∏•‡∏ö.‡∏°./‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
    if hist_2565 is not None: msg_lines.append(f"  ‚Ä¢ ‡∏õ‡∏µ 2565: {hist_2565:,.0f} ‡∏•‡∏ö.‡∏°./‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
    if hist_2554 is not None: msg_lines.append(f"  ‚Ä¢ ‡∏õ‡∏µ 2554: {hist_2554:,.0f} ‡∏•‡∏ö.‡∏°./‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
    msg_lines += ["", summary_text]
    return "\n".join(msg_lines)

# --- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Error (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ---
def create_error_message(inburi_status, discharge_status):
    now = datetime.now(pytz.timezone('Asia/Bangkok'))
    return (
        f"‚öôÔ∏è‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‚ùå‚öôÔ∏è\n"
        f"‡πÄ‡∏ß‡∏•‡∏≤: {now.strftime('%d/%m/%Y %H:%M')} ‡∏ô.\n\n"
        f"‚Ä¢ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πå‡∏ö‡∏∏‡∏£‡∏µ: {inburi_status}\n"
        f"‚Ä¢ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏û‡∏£‡∏∞‡∏¢‡∏≤: {discharge_status}\n\n"
        f"‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Log ‡∏ö‡∏ô GitHub Actions ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ñ‡∏£‡∏±‡∏ö"
    )

# --- ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° LINE (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ---
def send_line_push(message):
    if not all([LINE_TOKEN, LINE_GROUP_ID]):
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö LINE_TOKEN ‡∏´‡∏£‡∏∑‡∏≠ LINE_GROUP_ID")
        return
    headers = {"Content-Type": "application/json", "Authorization": f"Bearer {LINE_TOKEN}"}
    payload = {"to": LINE_GROUP_ID, "messages": [{"type": "text", "text": message}]}
    try:
        res = requests.post(LINE_PUSH_API_URL, headers=headers, json=payload, timeout=15)
        res.raise_for_status()
        print("‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Push ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
    except Exception as e:
        print(f"‚ùå ERROR: LINE Push: {e}")

# --- Main ---
if __name__ == "__main__":
    print("=== ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ô‡πâ‡∏≥‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πå‡∏ö‡∏∏‡∏£‡∏µ ===")
    # ‡∏î‡∏∂‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡πå‡∏ö‡∏∏‡∏£‡∏µ‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥ (‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏£‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö)
    inburi_level, _ = get_inburi_data(SINGBURI_URL)
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ï‡∏•‡∏¥‡πà‡∏á (Bank level) ‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô 13 ‡πÄ‡∏°‡∏ï‡∏£ ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    bank_level = 13.0
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ô‡πâ‡∏≥‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÄ‡∏Ç‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏û‡∏£‡∏∞‡∏¢‡∏≤
    dam_discharge = fetch_chao_phraya_dam_discharge(DISCHARGE_URL)
    # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå Excel (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    hist_2567 = get_historical_from_excel(2567)
    hist_2565 = get_historical_from_excel(2565)
    hist_2554 = get_historical_from_excel(2554)
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ô‡πâ‡∏≥‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÄ‡∏Ç‡∏∑‡πà‡∏≠‡∏ô‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if inburi_level is not None and dam_discharge is not None:
        final_message = analyze_and_create_message(
            inburi_level, dam_discharge, bank_level,
            hist_2567=hist_2567, hist_2565=hist_2565, hist_2554=hist_2554,
        )
    else:
        inburi_status = "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" if inburi_level is not None else "‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß"
        discharge_status = "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" if dam_discharge is not None else "‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß"
        final_message = create_error_message(inburi_status, discharge_status)
    print("\nüì§ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:")
    print(final_message)
    print("\nüöÄ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE...")
    send_line_push(final_message)
    print("‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
